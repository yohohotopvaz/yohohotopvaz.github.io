(function (modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
        }
        var module = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.l = true;
        return module.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.i = function (value) {
        return value;
    };
    __webpack_require__.d = function (exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
            Object.defineProperty(exports, name, {
                configurable: false,
                enumerable: true,
                get: getter
            });
        }
    };
    __webpack_require__.n = function (module) {
        var getter = module && module.__esModule ? function getDefault() {
            return module['default'];
        } : function getModuleExports() {
            return module;
        };
        __webpack_require__.d(getter, 'a', getter);
        return getter;
    };
    __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "";
    return __webpack_require__(__webpack_require__.s = 47);
}({
    47: function (module, exports) {
        var isIE11 = !!window.MSInputMethodContext && !!document.documentMode;
        var AssetLoader = {};
        AssetLoader.assetProgress = {};
        AssetLoader.loadedAssets = {};
        AssetLoader.queue = [];
        AssetLoader.queueIdx = 0;
        AssetLoader.loader = {};
        AssetLoader.maxConcurrency = Infinity;
        AssetLoader.load = function (callback) {
            AssetLoader.asyncQueue(AssetLoader.queue, function () {
                AssetLoader.queue = [];
                AssetLoader.assetProgress = {};
                AssetLoader.progressListeners.forEach(function (callback) {
                    return callback(1);
                });
                if (typeof callback === 'function') {
                    callback();
                }
            });
        };
        AssetLoader.queueNext = function () {
            AssetLoader.queueIdx++;
        };
        AssetLoader.done = function (key, asset) {
            AssetLoader.loadedAssets[key] = asset;
            AssetLoader.updateAssetProgress(key, 1, 1);
        };
        AssetLoader.push = function (func) {
            if (typeof AssetLoader.queue[AssetLoader.queueIdx] === 'undefined') {
                AssetLoader.queue[AssetLoader.queueIdx] = [];
            }
            AssetLoader.queue[AssetLoader.queueIdx].push(func);
        };
        AssetLoader.progressListeners = [];
        AssetLoader.getProgress = function () {
            if (AssetLoader.queue.length <= 0) {
                return 1;
            }
            var total = 0;
            Object.keys(AssetLoader.assetProgress).forEach(function (asset) {
                total += AssetLoader.assetProgress[asset];
            });
            var totalLoaders = 0;
            AssetLoader.queue.forEach(function (collection) {
                totalLoaders += collection.length;
            });
            return total / totalLoaders;
        };
        AssetLoader.updateAssetProgress = function (asset, done, total) {
            if (AssetLoader.assetProgress[asset] === 1 || total < done || total <= 0) {
                return;
            }
            var progress = 1;
            if (typeof done !== 'undefined' && typeof total !== 'undefined') {
                progress = done / total;
            }
            AssetLoader.assetProgress[asset] = progress;
            if (AssetLoader.progressListeners.length > 0) {
                AssetLoader.progressListeners.forEach(function (callback) {
                    return callback(AssetLoader.getProgress());
                });
            }
        };
        AssetLoader.getAssetById = function (id) {
            return AssetLoader.loadedAssets[id];
        };
        AssetLoader.asyncQueue = function (queue, callback) {
            var workingQueue = queue.slice();
            var next = function next() {
                var collection = workingQueue.shift();
                AssetLoader.asyncCollection(collection, function () {
                    if (workingQueue.length > 0) {
                        next();
                    } else {
                        callback();
                    }
                });
            };
            next();
        };
        AssetLoader.asyncCollection = function (collection, callback) {
            var collection = collection.slice();
            var numLoading = Math.min(AssetLoader.maxConcurrency, collection.length);
            var loadAndContinue = function loadAndContinue(func) {
                func(function () {
                    numLoading--;
                    if (collection.length > 0) {
                        numLoading++;
                        loadAndContinue(collection.shift());
                    } else if (numLoading === 0) {
                        callback();
                    }
                });
            };
            collection.splice(0, AssetLoader.maxConcurrency).forEach(loadAndContinue);
        };
        AssetLoader.add = function (asset) {
            var fileType = asset.split('.').pop();
            if (fileType === 'png') {
                AssetLoader.add.image(asset);
            } else if (fileType === 'json') {
                AssetLoader.add.json(asset);
            } else if (fileType === 'css') {
                AssetLoader.add.css(asset);
            } else {
                throw new Error('Unsupported file-type (' + fileType + ') passed to AssetLoader.add.');
            }
        };
        AssetLoader.add.image = function (asset) {
            AssetLoader.push(function (done) {
                var img = new Image();
                img.onload = function () {
                    AssetLoader.done(asset, img);
                    AssetLoader.updateAssetProgress(asset, 1, 1);
                    done();
                };
                img.src = asset;
            });
        };
        AssetLoader.setupAudioLoader = function () {
            if (isIE11) {
                return;
            }
            AssetLoader.audioLoader = AssetLoader.audioLoader || new THREE.AudioLoader();
        };
        AssetLoader.setupFontLoader = function () {
            AssetLoader.fontLoader = AssetLoader.fontLoader || new THREE.FontLoader();
        };
        AssetLoader.add.audio = function (filename) {
            if (isIE11) {
                return;
            }
            AssetLoader.setupAudioLoader();
            AssetLoader.push(function (done) {
                AssetLoader.audioLoader.load(filename, function (buffer) {
                    AssetLoader.done(filename, buffer);
                    done();
                });
            });
        };
        AssetLoader.add.threeFont = function (filename) {
            AssetLoader.setupFontLoader();
            AssetLoader.fontLoader.load(filename, function (font) {
                AssetLoader.done(filename, font);
            });
        };
        AssetLoader.add.plainAudio = function (asset) {
            if (isIE11) {
                return;
            }
            AssetLoader.push(function (done) {
                var audio = new Audio(asset);
                AssetLoader.done(asset, audio);
                done();
            });
        };
        AssetLoader.add.spriteSheet = function (image, json) {
            AssetLoader.add.image(image);
            AssetLoader.add.json(json);
        };
        AssetLoader.add.bitmapText = function (image, json) {
            AssetLoader.add.image(image);
            AssetLoader.add.json(json);
        };
        AssetLoader.add.webFont = function (fontFamily, css) {
            AssetLoader.add.css(css);
            var el = document.createElement('div');
            el.innerText = 'Loading ' + fontFamily;
            el.style.fontFamily = fontFamily;
            el.style.width = 0;
            el.style.height = 0;
            el.style.overflow = 'hidden';
            document.body.appendChild(el);
        };
        AssetLoader.add.json = function (asset) {
            AssetLoader.push(function (done) {
                loadJSON(asset, function (response) {
                    AssetLoader.done(asset, response);
                    done();
                });
            });
        };
        AssetLoader.add.script = function (asset) {
            AssetLoader.push(function (done) {
                AssetLoader.loader.script(asset, function () {
                    AssetLoader.done(asset, asset);
                    done();
                });
            });
        };
        AssetLoader.loader.script = function (asset, callback) {
            var el = document.createElement('script');
            el.src = asset;
            el.onload = callback;
            document.head.appendChild(el);
        };
        AssetLoader.add.css = function (asset) {
            AssetLoader.push(function (done) {
                var el = document.createElement('link');
                el.type = 'text/css';
                el.rel = 'stylesheet';
                el.href = asset;
                el.onload = function () {
                    AssetLoader.done(asset, el);
                    done();
                };
                document.head.appendChild(el);
            });
        };
        var loadGeneric = function loadGeneric(url, callback) {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, true);
            if (url.indexOf('.zip') !== -1) {
                xhr.responseType = 'arraybuffer';
            }
            var readyCallback = function readyCallback() {
                if (xhr.readyState === 4) {
                    callback(xhr.response || xhr.responseText);
                    xhr.onload = null;
                    xhr.onreadystatechange = null;
                }
            };
            xhr.onload = readyCallback;
            xhr.onreadystatechange = readyCallback;
            xhr.onprogress = function (evt) {
                AssetLoader.updateAssetProgress(url, evt.loaded, evt.total);
            };
            xhr.onerror = function (error) {
                throw new Error('Error during XHR: ' + error);
            };
            xhr.send();
        };
        var loadJSON = function loadJSON(url, callback) {
            loadGeneric(url, function (response) {
                callback(JSON.parse(response));
            });
        };
        window.AssetLoader = AssetLoader;
        module.exports = AssetLoader;
    }
}));