(function (modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
        }
        var module = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.l = true;
        return module.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.i = function (value) {
        return value;
    };
    __webpack_require__.d = function (exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
            Object.defineProperty(exports, name, {
                configurable: false,
                enumerable: true,
                get: getter
            });
        }
    };
    __webpack_require__.n = function (module) {
        var getter = module && module.__esModule ? function getDefault() {
            return module['default'];
        } : function getModuleExports() {
            return module;
        };
        __webpack_require__.d(getter, 'a', getter);
        return getter;
    };
    __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "";
    return __webpack_require__(__webpack_require__.s = 48);
}({
    1: function (module, exports) {
        Object.defineProperty(exports, "__esModule", { value: true });
        var Storage = {
            noStorage: null,
            data: {},
            detectLocalStorage: function detectLocalStorage() {
                this.noStorage = false;
                try {
                    localStorage.setItem('test', 0);
                } catch (e) {
                    this.noStorage = true;
                }
            },
            getItem: function getItem(key) {
                if (this.noStorage === null) {
                    this.detectLocalStorage();
                }
                if (this.noStorage) {
                    if (typeof this.data[key] === 'undefined') {
                        return null;
                    }
                    return this.data[key];
                }
                if (typeof this.data[key] !== 'undefined') {
                    return this.data[key];
                }
                var value = localStorage.getItem(key);
                this.data[key] = value;
                return value;
            },
            setItem: function setItem(key, value) {
                if (this.noStorage === null) {
                    this.detectLocalStorage();
                }
                this.data[key] = value;
                if (this.noStorage) {
                    return;
                }
                localStorage.setItem(key, value);
            }
        };
        exports.default = Storage;
    },
    18: function (module, exports) {
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.default = getQueryVariable;
        function getQueryVariable(variable) {
            var query = window.location.search.substring(1);
            var vars = query.split("&");
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split("=");
                if (pair[0] == variable) {
                    return pair[1];
                }
            }
            return false;
        }
    },
    19: function (module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.isInSplitTestGroup = exports.assignTestGroups = undefined;
        var _extends = Object.assign || function (target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                        target[key] = source[key];
                    }
                }
            }
            return target;
        };
        var _Storage = __webpack_require__(1);
        var _Storage2 = _interopRequireDefault(_Storage);
        var _getQueryVariable = __webpack_require__(18);
        var _getQueryVariable2 = _interopRequireDefault(_getQueryVariable);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _defineProperty(obj, key, value) {
            if (key in obj) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
            } else {
                obj[key] = value;
            }
            return obj;
        }
        var now = new Date();
        var defaults = {
            id: null,
            start: null,
            end: null,
            disabled: false,
            groups: [],
            domains: null
        };
        var tests = [_extends({}, defaults, {
                id: 'easy-access',
                groups: [
                    {
                        id: 'control',
                        size: 1 / 2
                    },
                    {
                        id: 'new',
                        size: 1 / 2
                    }
                ]
            })];
        var chooseRandomGroupFromTest = function chooseRandomGroupFromTest(test) {
            var roll = Math.random();
            var chosenGroup = null;
            var chance = 0;
            test.groups.forEach(function (group) {
                if (chosenGroup) {
                    return;
                }
                chance += group.size;
                if (roll <= chance) {
                    chosenGroup = group;
                }
            });
            return chosenGroup;
        };
        var getCurrentlyActiveTests = function getCurrentlyActiveTests(domain) {
            return tests.filter(function (test) {
                return !test.disabled && (test.domains === null || test.domains.indexOf(domain) !== -1) && (!test.start || test.start <= now) && (!test.end || test.end >= now);
            });
        };
        var assignTestGroups = exports.assignTestGroups = function assignTestGroups(domain) {
            getCurrentlyActiveTests(domain).forEach(function (test) {
                var cookieData = getCookieData();
                var cookieGroupId = cookieData ? cookieData[test.id] : null;
                if (cookieGroupId) {
                    assignGroupToTest(cookieGroupId, test.id);
                    return;
                }
                var group = chooseRandomGroupFromTest(test);
                assignGroupToTest(group.id, test.id);
            });
        };
        var assignGroupToTest = function assignGroupToTest(groupId, testId) {
            updateCookieData(_extends({}, cachedCookieData, _defineProperty({}, testId, groupId)));
            window.splitTestGroups = window.splitTestGroups || [];
            window.splitTestGroups[testId] = groupId;
        };
        var cachedCookieData = null;
        var getCookieData = function getCookieData() {
            if (cachedCookieData !== null) {
                return cachedCookieData;
            }
            var cookie = _Storage2.default.getItem('splitTests');
            if (cookie) {
                cachedCookieData = JSON.parse(cookie);
            }
            return cachedCookieData;
        };
        var updateCookieData = function updateCookieData(data) {
            cachedCookieData = data;
            _Storage2.default.setItem('splitTests', JSON.stringify(data));
        };
        var isInSplitTestGroup = exports.isInSplitTestGroup = function isInSplitTestGroup(test, group) {
            var forceGroup = (0, _getQueryVariable2.default)('split-test-' + test);
            if (forceGroup) {
                return forceGroup === group;
            }
            return window.splitTestGroups && window.splitTestGroups[test] && window.splitTestGroups[test] === group;
        };
    },
    23: function (module, exports) {
        module.exports = function (module) {
            if (!module.webpackPolyfill) {
                module.deprecate = function () {
                };
                module.paths = [];
                if (!module.children) {
                    module.children = [];
                }
                Object.defineProperty(module, "loaded", {
                    enumerable: true,
                    get: function get() {
                        return module.l;
                    }
                });
                Object.defineProperty(module, "id", {
                    enumerable: true,
                    get: function get() {
                        return module.i;
                    }
                });
                module.webpackPolyfill = 1;
            }
            return module;
        };
    },
    3: function (module, exports) {
        Object.defineProperty(exports, "__esModule", { value: true });
        var Utils = {};
        Utils.getQueryVariable = function (variable) {
            var query = window.location.search.substring(1);
            var vars = query.split("&");
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split("=");
                if (pair[0] == variable) {
                    return pair[1];
                }
            }
            return false;
        };
        Utils.getHiddenProp = function () {
            var prefixes = [
                'webkit',
                'moz',
                'ms',
                'o'
            ];
            if ('hidden' in document) {
                return 'hidden';
            }
            for (var i = 0; i < prefixes.length; i++) {
                if (prefixes[i] + 'Hidden' in document) {
                    return prefixes[i] + 'Hidden';
                }
            }
            return null;
        };
        Utils.isHidden = function () {
            var prop = Utils.getHiddenProp();
            if (!prop) {
                return false;
            }
            return document[prop];
        };
        Utils.hslToRgb = function (h, s, l) {
            var r, g, b;
            if (s == 0) {
                r = g = b = l;
            } else {
                var hue2rgb = function hue2rgb(p, q, t) {
                    if (t < 0) {
                        t += 1;
                    }
                    if (t > 1) {
                        t -= 1;
                    }
                    if (t < 1 / 6) {
                        return p + (q - p) * 6 * t;
                    }
                    if (t < 1 / 2) {
                        return q;
                    }
                    if (t < 2 / 3) {
                        return p + (q - p) * (2 / 3 - t) * 6;
                    }
                    return p;
                };
                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                var p = 2 * l - q;
                r = hue2rgb(p, q, h + 1 / 3);
                g = hue2rgb(p, q, h);
                b = hue2rgb(p, q, h - 1 / 3);
            }
            return [
                Math.round(r * 255),
                Math.round(g * 255),
                Math.round(b * 255)
            ];
        };
        Utils.getRandomArbitrary = function (min, max) {
            return Math.random() * (max - min) + min;
        };
        Utils.inverseLerp = function (a, b, x) {
            return (x - a) / (b - a);
        };
        Utils.getRandomInt = function (min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        };
        Utils.getRandomFromArray = function (array) {
            return array[Math.floor(Math.random() * array.length)];
        };
        Utils.normalize = function (val, min, max) {
            return (val - min) / (max - min);
        };
        Utils.extractDomainFromURL = function (url) {
            var domain = null;
            try {
                domain = url ? url.match(/^(?:https?:\/\/)?(?:[^@/\n]+@)?(?:www\.)?([^:/\n]+)/im)[1] : null;
            } catch (e) {
            }
            return domain;
        };
        exports.default = Utils;
    },
    35: function (module, exports) {
        {
            var Fader = function Fader(el, target, callback, fadeTime) {
                this.fadeOutStart = Date.now();
                this.el = el;
                this.fadeTarget = target;
                this.fadeCallback = callback;
                this.fadeTime = fadeTime || 500;
            };
            Fader.prototype.fade = function () {
                var opacity = parseFloat(this.el.style.opacity);
                var deltaTime = Date.now() - this.fadeOutStart;
                var alpha = Math.min(1, deltaTime / this.fadeTime);
                if (this.fadeTarget === 0) {
                    alpha = 1 - alpha;
                }
                this.el.style.opacity = alpha;
                if (alpha === this.fadeTarget) {
                    FadeHelper.destroy(this);
                    if (typeof this.fadeCallback === 'function') {
                        this.fadeCallback();
                    }
                }
            };
            var FadeHelper = {};
            FadeHelper.faders = [];
            FadeHelper.fadeTo = function (el, target, callback) {
                var fader = new Fader(el, target, callback);
                FadeHelper.faders.push(fader);
                FadeHelper.animate();
            };
            FadeHelper.animate = function () {
                if (FadeHelper.faders.length === 0) {
                    return;
                }
                FadeHelper.faders.forEach(function (fader) {
                    fader.fade();
                });
                requestAnimationFrame(FadeHelper.animate);
            };
            FadeHelper.destroy = function (fader) {
                var idx = FadeHelper.faders.indexOf(fader);
                if (idx < 0) {
                    return;
                }
                FadeHelper.faders.splice(idx, 1);
            };
            module.exports = FadeHelper;
        }
    },
    36: function (module, exports, __webpack_require__) {
        (function (module) {
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                return typeof obj;
            } : function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var Detector = {
                canvas: !!window.CanvasRenderingContext2D,
                webgl: function () {
                    try {
                        var canvas = document.createElement('canvas');
                        return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));
                    } catch (e) {
                        return false;
                    }
                }(),
                workers: !!window.Worker,
                fileapi: window.File && window.FileReader && window.FileList && window.Blob,
                getWebGLErrorMessage: function getWebGLErrorMessage() {
                    var element = document.createElement('div');
                    element.id = 'webgl-error-message';
                    element.style.fontFamily = 'monospace';
                    element.style.fontSize = '13px';
                    element.style.fontWeight = 'normal';
                    element.style.textAlign = 'center';
                    element.style.background = '#fff';
                    element.style.color = '#000';
                    element.style.padding = '1.5em';
                    element.style.width = '400px';
                    element.style.margin = '5em auto 0';
                    if (!this.webgl) {
                        element.innerHTML = window.WebGLRenderingContext ? [
                            'Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br />',
                            'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'
                        ].join('\n') : [
                            'Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br/>',
                            'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'
                        ].join('\n');
                    }
                    return element;
                },
                addGetWebGLMessage: function addGetWebGLMessage(parameters) {
                    var parent, id, element;
                    parameters = parameters || {};
                    parent = parameters.parent !== undefined ? parameters.parent : document.body;
                    id = parameters.id !== undefined ? parameters.id : 'oldie';
                    element = Detector.getWebGLErrorMessage();
                    element.id = id;
                    parent.appendChild(element);
                }
            };
            if ((false ? 'undefined' : _typeof(module)) === 'object') {
                module.exports = Detector;
            }
        }.call(exports, __webpack_require__(23)(module)));
    },
    42: function (module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", { value: true });
        var FadeHelper = __webpack_require__(35);
        var backgroundColor = '#69ceec';
        var bubbleColor = '#81DCF8';
        var whaleRotation = 0;
        var whaleX;
        var whaleY;
        var hipsterTextX;
        var hipsterTextY;
        var whaleTextX;
        var whaleTextY;
        var textIdx = 0;
        var textTimer = 0;
        var HipsterWhale = function HipsterWhale() {
            this.wrapper = document.body;
            this.started = false;
            this.allowedToClose = false;
            this.timeToClose = false;
            this.destroyed = false;
            this.setupCanvas();
            window.addEventListener('resize', this.resize.bind(this));
        };
        var whaleTween;
        HipsterWhale.prototype.play = function (callback) {
            var this$1 = this;
            if (this.started) {
                return;
            }
            this.started = true;
            this.logo = new Image();
            this.logo.src = this.logoSrc.src;
            this.hipster = this.hipsters[0];
            this.whale = this.whales[0];
            this.bubbles = [];
            this.callback = callback;
            this.logoAspect = this.logoSrc.width / this.logoSrc.height;
            this.textAspect = this.hipsters[0].width / this.hipsters[0].height;
            this.wrapper.appendChild(this.canvas);
            this.oldTime;
            this.deltaTime = 0;
            window.setTimeout(function () {
                this.timeToClose = true;
                this.attemptToClose();
            }.bind(this), 1500);
            this.canvas.id = 'hipster-whale';
            this.canvas.style.position = 'absolute';
            this.canvas.style.left = 0;
            this.canvas.style.top = 0;
            this.canvas.style.right = 0;
            this.canvas.style.bottom = 0;
            this.canvas.style.zIndex = 99999;
            this.canvas.style.opacity = 0;
            this.resize();
            for (var b = 0; b < 20; b++) {
                var bx = getRandomArbitrary(0, this$1.canvas.width);
                var by = getRandomArbitrary(0, this$1.canvas.height);
                var bs = getRandomArbitrary(5, 15);
                this$1.bubbles.push({
                    x: bx,
                    y: by,
                    size: bs
                });
            }
            window.setTimeout(this.whaleMovement.bind(this), 250);
            this.animate();
            var audio = AssetLoader.getAssetById('plain-audio/splashintro.mp4');
            if (audio && (!window.audioContext || window.audioContext.state === 'running')) {
                audio.play();
            }
        };
        HipsterWhale.prototype.whaleMovement = function () {
            if (this.destroyed) {
                return;
            }
            var dy = whaleY;
            if (dy < this.canvas.height * 0.5) {
                dy += getRandomArbitrary(this.canvas.height / 25, this.canvas.height / 15);
            } else {
                dy -= getRandomArbitrary(this.canvas.height / 25, this.canvas.height / 15);
            }
            var dt = 4 * Math.abs(dy);
            var coord = { y: whaleY };
            if (whaleTween) {
                whaleTween.stop();
            }
            whaleTween = new TWEEN.Tween(coord).to({ y: dy }, dt).onUpdate(function () {
                if (this.destroyed) {
                    return;
                }
                whaleY = this.y;
            }).start();
            window.setTimeout(this.whaleMovement.bind(this), dt);
        };
        HipsterWhale.prototype.show = function () {
            FadeHelper.fadeTo(this.canvas, 1);
        };
        HipsterWhale.prototype.allowClose = function () {
            this.allowedToClose = true;
            this.attemptToClose();
        };
        HipsterWhale.prototype.attemptToClose = function () {
            if (!this.allowedToClose || !this.timeToClose) {
                return;
            }
            var self = this;
            whaleTween.stop();
            FadeHelper.fadeTo(self.canvas, 0, function () {
                window.removeEventListener('resize', self.resize.bind(self));
                self.end();
            }.bind(self));
        };
        HipsterWhale.prototype.setupCanvas = function () {
            this.canvas = document.createElement('canvas');
            this.context = this.canvas.getContext('2d');
        };
        HipsterWhale.prototype.resize = function () {
            var rect = this.wrapper.getBoundingClientRect();
            this.canvas.width = rect.width;
            this.canvas.height = rect.height;
            whaleX = this.canvas.width * 0.5;
            whaleY = this.canvas.height * 0.5;
            whaleTextX = hipsterTextX = this.canvas.width * 0.5;
            hipsterTextY = this.canvas.height * 0.15;
            whaleTextY = this.canvas.height * 0.85;
            this.scaleLogo();
        };
        function rad(degrees) {
            return degrees * Math.PI / 180;
        }
        function getRandomArbitrary(min, max) {
            return Math.random() * (max - min) + min;
        }
        HipsterWhale.prototype.animate = function (time) {
            if (this.destroyed) {
                return;
            }
            time = time || 0;
            if (!this.oldTime) {
                this.oldTime = time;
            }
            this.deltaTime = time - this.oldTime;
            this.oldTime = time;
            TWEEN.update(time);
            textTimer += this.deltaTime;
            whaleRotation += getRandomArbitrary(-2, 2) * this.deltaTime / 1e3;
            this.context.fillStyle = backgroundColor;
            this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
            this.drawBubbles();
            this.drawText();
            this.drawLogo();
            requestAnimationFrame(this.animate.bind(this));
        };
        HipsterWhale.prototype.scaleLogo = function () {
            var maxWidth = this.canvas.width * 0.6;
            var maxHeight = this.canvas.height * 0.4;
            if (this.logo) {
                if (maxWidth / this.logoAspect > maxHeight) {
                    this.logo.height = maxHeight;
                    this.logo.width = maxHeight * this.logoAspect;
                } else {
                    this.logo.width = maxWidth;
                    this.logo.height = maxWidth / this.logoAspect;
                }
                this.whales.forEach(function (whale) {
                    whale.width = this.logo.width * 1.5;
                    whale.height = whale.width / this.textAspect;
                }.bind(this));
                this.hipsters.forEach(function (hipster) {
                    hipster.width = this.logo.width * 1.5;
                    hipster.height = hipster.width / this.textAspect;
                }.bind(this));
            }
        };
        HipsterWhale.prototype.drawBubbles = function () {
            var this$1 = this;
            for (var b = 0; b < this.bubbles.length; b++) {
                var bubble = this$1.bubbles[b];
                this$1.context.fillStyle = bubbleColor;
                bubble.y -= 10 * this$1.deltaTime / this$1.canvas.height;
                if (bubble.y < 0) {
                    bubble.y = this$1.canvas.height;
                }
                this$1.context.fillRect(bubble.x, bubble.y, bubble.size, bubble.size);
            }
        };
        HipsterWhale.prototype.drawText = function () {
            this.context.save();
            if (typeof this.context['mozImageSmoothingEnabled'] !== 'undefined') {
                this.context['mozImageSmoothingEnabled'] = false;
            }
            if (typeof this.context['webkitImageSmoothingEnabled'] !== 'undefined') {
                this.context['webkitImageSmoothingEnabled'] = false;
            }
            if (typeof this.context['msImageSmoothingEnabled'] !== 'undefined') {
                this.context['msImageSmoothingEnabled'] = false;
            }
            if (typeof this.context['imageSmoothingEnabled'] !== 'undefined') {
                this.context['imageSmoothingEnabled'] = false;
            }
            this.context.translate(hipsterTextX, hipsterTextY);
            this.context.drawImage(this.hipster, -this.hipster.width / 2, -this.hipster.height / 2, this.hipster.width, this.hipster.height);
            this.context.translate(-hipsterTextX, -hipsterTextY);
            this.context.translate(whaleTextX, whaleTextY);
            this.context.drawImage(this.whale, -this.whale.width / 2, -this.whale.height / 2, this.whale.width, this.whale.height);
            this.context.translate(-whaleTextX, -whaleTextY);
            if (textTimer >= 150) {
                textIdx = (textIdx + 1) % 3;
                this.hipster = this.hipsters[textIdx];
                this.whale = this.whales[textIdx];
                textTimer = 0;
            }
            this.context.restore();
        };
        HipsterWhale.prototype.drawLogo = function () {
            var r = rad(whaleRotation);
            this.context.translate(whaleX, whaleY);
            this.context.rotate(r);
            this.context.drawImage(this.logo, -this.logo.width / 2, -this.logo.height / 2, this.logo.width, this.logo.height);
            this.context.rotate(-r);
            this.context.translate(-whaleX, -whaleY);
        };
        HipsterWhale.prototype.end = function () {
            this.destroyed = true;
            this.wrapper.removeChild(this.canvas);
            if (typeof this.callback === 'function') {
                this.callback();
            }
        };
        exports.default = HipsterWhale;
    },
    43: function (module, exports) {
        Object.defineProperty(exports, "__esModule", { value: true });
        var containerID = 'loading-bar';
        var innerContainerID = 'loading-bar-inner-container';
        var barID = 'loading-bar-bar';
        var loadingTextID = 'loading-bar-text';
        var borderClassName = 'loading-bar-border';
        var chickenID = 'loading-bar-chicken';
        var barTransitionTime = 0.5;
        var minUpdateTime = 0.1;
        var maxFakeProgress = 0.987;
        var style = '\n#' + containerID + ' {\n\tposition: absolute;\n\tz-index: 9999999;\n\twidth: 93%;\n\theight: 5%;\n\tleft: 2.5%;\n\tbottom: -12%;\n\ttransition: all ' + barTransitionTime + 's ease-in-out;\n\ttransform: translate3d(0,0,0);\n\tperspective: 1000px;\n}\n\n#' + innerContainerID + ' {\n\tposition: absolute;\n\tbackground: #4ecbff;\n\tbox-shadow: inset 0 -5px #0ea9f1;\n\tleft: 0;\n\ttop: 0;\n\twidth: 100%;\n\theight: 100%;\n\tz-index: 1;\n}\n\n#' + barID + ' {\n\theight: 100%;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 0;\n\twidth: 100%;\n\tbackground: #fea47c;\n\ttransform-origin: left;\n\tbox-shadow: inset 0 -5px #ff8149;\n\ttransition: 0.2s all ease-out;\n\tz-index: 1;\n\tperspective: 1000px;\n}\n\n#' + loadingTextID + ' {\n\ttext-align: center;\n\tfont-family: Arial;\n\tfont-weight: bold;\n\tcolor: #fff;\n\tposition: absolute;\n\tz-index: 2;\n\twidth: 100%;\n\ttop: 8%;\n\ttext-shadow: 0 3px rgba(0, 0, 0, 0.2);\n}\n\n.' + borderClassName + ' {\n\tbackground: #fff;\n\tposition: absolute;\n}\n\n#' + chickenID + ' {\n\tposition: absolute;\n\tright: -3%;\n\ttop: -60%;\n\theight: 200%;\n\tz-index: 1;\n\ttransform-origin: 50% 100%;\n\tanimation: chicken-idle-animation .6s ease-in-out alternate infinite;\n}\n\n@keyframes chicken-idle-animation {\n\t0%  { transform: scale3d(1, 1, 1); }\n\t15%  { transform: scale3d(1, 1, 1); }\n\t85% { transform: scale3d(1.1, .9, 1.1); }\n\t100% { transform: scale3d(1.1, .9, 1.1); }\n}\n';
        var LoadingBar = function LoadingBar() {
            this.enableFakeProgress = false;
            this.wrapper = document.body;
            this.totalProgress = 0;
            this.progress = 0;
            var styleEl = document.createElement('style');
            styleEl.innerHTML = style;
            document.head.appendChild(styleEl);
            this.container = document.createElement('div');
            this.container.id = containerID;
            this.innerContainer = document.createElement('div');
            this.innerContainer.id = innerContainerID;
            this.container.appendChild(this.innerContainer);
            this.bar = document.createElement('div');
            this.bar.id = barID;
            this.innerContainer.appendChild(this.bar);
            this.loadingText = document.createElement('div');
            this.loadingText.id = loadingTextID;
            this.innerContainer.appendChild(this.loadingText);
            this.loadingTextBig = document.createElement('span');
            this.loadingTextBig.innerHTML = '0';
            this.loadingText.appendChild(this.loadingTextBig);
            this.loadingTextSmall = document.createElement('span');
            this.loadingTextSmall.innerHTML = '.0';
            this.loadingText.appendChild(this.loadingTextSmall);
            this.loadingTextPerc = document.createElement('span');
            this.loadingTextPerc.innerHTML = '%';
            this.loadingText.appendChild(this.loadingTextPerc);
            this.borderSides = document.createElement('div');
            this.borderSides.className = borderClassName;
            this.borderSides.style.height = '100%';
            this.container.appendChild(this.borderSides);
            this.borderTopBottom = document.createElement('div');
            this.borderTopBottom.className = borderClassName;
            this.borderTopBottom.style.width = '100%';
            this.container.appendChild(this.borderTopBottom);
            window.addEventListener('resize', this.resize.bind(this));
        };
        LoadingBar.prototype.show = function () {
            var _this = this;
            this.chicken = new Image();
            this.chicken.src = this.chickenSrc;
            this.chicken.id = chickenID;
            this.container.appendChild(this.chicken);
            this.wrapper.appendChild(this.container);
            this.resize();
            window.setTimeout(function () {
                _this.container.style.transform = 'translate3D(0, -270%, 0)';
            }, 0);
            requestAnimationFrame(this.update.bind(this));
        };
        LoadingBar.prototype.enteredNewLoadingPhase = function (percDedicatedToThisPhase) {
            this.totalProgress += this.currentProgress || 0;
            this.percDedicatedToCurrentPhase = percDedicatedToThisPhase;
        };
        LoadingBar.prototype.enteredFinalLoadingPhase = function () {
            this.totalProgress += this.currentProgress || 0;
            this.percDedicatedToCurrentPhase = 1 - this.totalProgress;
        };
        LoadingBar.prototype.setProgress = function (currentPhaseProgress) {
            this.currentProgress = currentPhaseProgress * this.percDedicatedToCurrentPhase || 0;
            var newProgress = this.totalProgress + this.currentProgress;
            if (Math.round(newProgress) !== this.progress) {
                this.progressWasLastUpdatedAt = Date.now();
            }
            this.progress = Math.max(this.progress, newProgress);
        };
        LoadingBar.prototype.resize = function () {
            var containerBounds = this.container.getBoundingClientRect();
            this.loadingText.style.fontSize = (containerBounds.height / 1.4).toFixed(2) + 'px';
            this.loadingTextSmall.style.fontSize = (containerBounds.height / 3).toFixed(2) + 'px';
            var borderSize = containerBounds.height / 10;
            this.borderSides.style.left = '-' + borderSize + 'px';
            this.borderSides.style.width = containerBounds.width + borderSize * 2 + 'px';
            this.borderTopBottom.style.top = '-' + borderSize + 'px';
            this.borderTopBottom.style.height = containerBounds.height + borderSize * 2 + 'px';
        };
        LoadingBar.prototype.destroy = function () {
            var _this2 = this;
            if (this.destroyed) {
                return;
            }
            this.destroyed = true;
            window.removeEventListener('resize', this.resize.bind(this));
            this.container.style.transform = 'translate3d(0,0,0)';
            window.setTimeout(function () {
                _this2.wrapper.removeChild(_this2.container);
            }, barTransitionTime * 1000);
        };
        LoadingBar.prototype.forceFinished = function () {
            this.progress = 1;
            this.lastProgress = 1;
            this.update();
        };
        LoadingBar.prototype.fakeProgressUpdate = function () {
            if (!this.enableFakeProgress) {
                return;
            }
            if (Math.random() < 0.95) {
                return;
            }
            this.progressWasLastUpdatedAt = Date.now();
            var progressIncrease = Math.atan((1 - this.progress) / 500) / (Math.PI / 8);
            this.progress = Math.max(this.progress, Math.min(maxFakeProgress, this.progress + progressIncrease));
        };
        LoadingBar.prototype.update = function () {
            if (this.progressWasLastUpdatedAt && this.progressWasLastUpdatedAt + minUpdateTime * 1000 < Date.now()) {
                this.fakeProgressUpdate();
            }
            var easeMultiplier = 15;
            var easedProgress = ((this.lastProgress || 0) * easeMultiplier + this.progress) / (easeMultiplier + 1);
            this.bar.style.transform = 'scale3d(' + easedProgress.toFixed(2) + ', 1, 1)';
            var percParts = (easedProgress * 100).toFixed(1).split('.');
            this.loadingTextBig.innerHTML = percParts[0];
            this.loadingTextSmall.innerHTML = '.' + percParts[1];
            if (easedProgress > 0.999) {
                return this.destroy();
            }
            this.lastProgress = easedProgress;
            requestAnimationFrame(this.update.bind(this));
        };
        exports.default = LoadingBar;
    },
    44: function (module, exports) {
        Object.defineProperty(exports, "__esModule", { value: true });
        var logoAngle = 104;
        var logoCot = 1 / Math.tan(logoAngle * Math.PI / 180);
        var logoHiddenTransform = {
            x: 0,
            y: 0
        };
        var logoHideTransition = 'cubic-bezier(0.895, 0.03, 0.685, 0.22)';
        var logoShownStyleTransform = 'translate3d(0, 0, 0)';
        var logoShowTransition = 'cubic-bezier(0.165, 0.84, 0.44, 1)';
        var logoTransitionDuration = '750ms';
        function LoadingScreen() {
            this.wrapper = document.body;
            this.shown = false;
            this.destroyed = false;
            this.bgColor = '#fff';
            this.progress = 0;
            this.progressZeroPoint = 0;
            this.forceSkip = false;
            this.textIdx = 0;
            this.container = document.createElement('div');
            this.container.style.position = 'relative';
            this.container.style.width = '100%';
            this.container.style.height = '100%';
            this.container.style.overflow = 'hidden';
            this.container.style.display = 'flex';
            this.container.style.justifyContent = 'center';
            this.container.style.alignItems = 'center';
            this.container.style.backgroundColor = 'rgb(105, 206, 236)';
        }
        ;
        LoadingScreen.prototype.updateProgress = function (progress) {
        };
        LoadingScreen.prototype.init = function () {
            this.container.style.backgroundColor = this.bgColor;
            this.createCrossyLogo();
            this.wrapper.appendChild(this.container);
        };
        LoadingScreen.prototype.createCrossyLogo = function () {
            this.logo = document.createElement('img');
            this.logo.src = 'sprites/crossy-road-logo.png';
            this.logo.style.minWidth = '50%';
            this.logo.style.maxWidth = '80%';
            this.logo.style.maxHeight = '50%';
            this.logo.style.marginTop = '-15%';
            this.logo.style.position = 'relative';
            this.logo.style.zIndex = 2;
            logoHiddenTransform.x = this.wrapper.getBoundingClientRect().width;
            logoHiddenTransform.y = logoCot * logoHiddenTransform.x;
            this.logo.style.transform = 'translate3d(' + -logoHiddenTransform.x + 'px, ' + logoHiddenTransform.y + 'px, 0)';
            this.container.appendChild(this.logo);
        };
        LoadingScreen.prototype.show = function (skippedPreroll) {
            var _this = this;
            this.skipPreroll = skippedPreroll;
            this.shown = true;
            if (this.progress >= 1 || this.forceSkip) {
                if (this.destroyed) {
                    return;
                }
                this.destroyed = true;
                this.wrapper.removeChild(this.container);
                return;
            }
            this.startTime = performance.now();
            this.logo.style.display = 'block';
            this.logo.style.transition = logoTransitionDuration + ' ' + logoShowTransition;
            window.setTimeout(function () {
                _this.logo.style.transform = logoShownStyleTransform;
            }, 0);
            window.firstCrossyLogoAnimationShown = true;
        };
        LoadingScreen.prototype.destroy = function () {
            if (this.destroyed) {
                return;
            }
            this.destroyed = true;
            this.wrapper.removeChild(this.container);
        };
        exports.default = LoadingScreen;
    },
    45: function (module, exports, __webpack_require__) {
        Object.defineProperty(exports, "__esModule", { value: true });
        var FadeHelper = __webpack_require__(35);
        var staticCss = '\n#poki-preroll {\n\tbackground: #83FFE7;\n\tposition: absolute;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tleft: 0;\n\ttop: 0;\n\twidth: 100%;\n\theight: 100%;\n\tz-index: 99999;\n\toverflow: hidden;\n\tperspective: 1000px;\n}\n\n#poki-preroll .logo {\n\tposition: relative;\n\tperspective: 1000px;\n\tz-index: 1;\n\tmax-height: 40%;\n\tmax-width: 80%;\n}\n\n#poki-preroll .icon-container {\n\tposition: absolute;\n\tleft: 0;\n\ttop: 0;\n\twidth: 100%;\n\theight: 100%;\n\ttransform: rotate(-5deg);\n}';
        var dynamicCss = '\n#poki-preroll .icon-scroller {\n\tperspective: 1000px;\n\tposition: absolute;\n\tleft: 0;\n\ttop: -10%;\n\twidth: 100%;\n\theight: 120%;\n\ttransform: translateX(0);\n\tanimation: scroll {scrollTime}s infinite linear;\n\tbackground-image: url(sprites/poki-icon.png);\n\tbackground-size: {iconSize}px {iconSize}px;\n}\n\n@keyframes scroll {\n\t0% {\n\t\ttransform: translateX(-{scrollWidth}px);\n\t},\n\t100% {\n\t\ttransform: translateX(0);\n\t}\n}\n';
        var staticStyle = void 0, dynamicStyle = void 0;
        var PokiPreroll = function PokiPreroll() {
            this.wrapper = document.body;
            this.started = false;
            this.allowedToClose = false;
            this.timeToClose = false;
            this.destroyed = false;
            this.container = document.createElement('div');
            this.container.style.visibility = 'hidden';
            this.container.id = 'poki-preroll';
            staticStyle = document.createElement('style');
            staticStyle.innerHTML = staticCss;
            document.head.appendChild(staticStyle);
            dynamicStyle = document.createElement('style');
            document.head.appendChild(dynamicStyle);
        };
        PokiPreroll.prototype.createElements = function () {
            this.wrapper.appendChild(this.container);
            this.logo = new Image();
            this.logo.src = this.logoSrc;
            this.logo.className = 'logo';
            this.logo.style.transform = 'translateY(' + -window.innerHeight + 'px)';
            this.container.appendChild(this.logo);
            var iconContainer = document.createElement('div');
            iconContainer.className = 'icon-container';
            [
                '-100%',
                '0%',
                '100%'
            ].forEach(function (left) {
                var iconScroller = document.createElement('div');
                iconScroller.className = 'icon-scroller';
                iconScroller.style.left = left;
                iconContainer.appendChild(iconScroller);
            });
            this.container.appendChild(iconContainer);
            this.resize();
            window.addEventListener('resize', this.resize.bind(this));
        };
        PokiPreroll.prototype.play = function (callback) {
            var _this = this;
            if (this.started) {
                return;
            }
            this.container.style.visibility = 'visible';
            this.started = true;
            this.callback = callback;
            window.setTimeout(function () {
                _this.logo.style.transition = '0.5s';
                _this.logo.style.transform = 'translateY(0)';
            }, 50);
            window.setTimeout(function () {
                this.timeToClose = true;
                this.attemptToClose();
            }.bind(this), 1500);
        };
        PokiPreroll.prototype.allowClose = function () {
            this.allowedToClose = true;
            this.attemptToClose();
        };
        PokiPreroll.prototype.attemptToClose = function () {
            if (!this.allowedToClose || !this.timeToClose) {
                return;
            }
            FadeHelper.fadeTo(this.container, 0, function () {
                this.end();
            }.bind(this));
        };
        PokiPreroll.prototype.end = function () {
            window.removeEventListener('resize', this.resize.bind(this));
            this.wrapper.removeChild(this.container);
            document.head.removeChild(staticStyle);
            document.head.removeChild(dynamicStyle);
            if (typeof this.callback === 'function') {
                this.callback();
                this.destroyed = true;
            }
        };
        PokiPreroll.prototype.resize = function () {
            var containerRect = this.container.getBoundingClientRect();
            var containerAspect = containerRect.width / containerRect.height;
            var finalCSS = dynamicCss;
            finalCSS = finalCSS.replace('{scrollTime}', containerAspect * 15);
            finalCSS = finalCSS.replace('{scrollWidth}', containerRect.width);
            var leastDifference = Infinity;
            var leastAmount = void 0;
            [
                7,
                8,
                9,
                10,
                11
            ].forEach(function (amount) {
                var pixelsPer = containerRect.width / amount;
                var diff = Math.abs(pixelsPer - Math.round(pixelsPer));
                if (diff < leastDifference) {
                    leastDifference = diff;
                    leastAmount = amount;
                }
            });
            finalCSS = finalCSS.replace(/{iconSize}/g, Math.round(containerRect.width / leastAmount));
            dynamicStyle.innerHTML = finalCSS;
        };
        exports.default = PokiPreroll;
    },
    48: function (module, exports, __webpack_require__) {
        var _HipsterWhale = __webpack_require__(42);
        var _HipsterWhale2 = _interopRequireDefault(_HipsterWhale);
        var _LoadingScreen = __webpack_require__(44);
        var _LoadingScreen2 = _interopRequireDefault(_LoadingScreen);
        var _PokiPreroll = __webpack_require__(45);
        var _PokiPreroll2 = _interopRequireDefault(_PokiPreroll);
        var _LoadingBar = __webpack_require__(43);
        var _LoadingBar2 = _interopRequireDefault(_LoadingBar);
        var _Utils = __webpack_require__(3);
        var _Utils2 = _interopRequireDefault(_Utils);
        var _getQueryVariable = __webpack_require__(18);
        var _getQueryVariable2 = _interopRequireDefault(_getQueryVariable);
        var _ABSplitter = __webpack_require__(19);
        var _Detector = __webpack_require__(36);
        var _Detector2 = _interopRequireDefault(_Detector);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        if (true) {
            POKI_ANALYTICS.init();
        }
        var domain = _Utils2.default.extractDomainFromURL(decodeURIComponent((0, _getQueryVariable2.default)('url_referrer')));
        (0, _ABSplitter.assignTestGroups)(domain);
        analytics.track('game_onboarding', 'dom_ready');
        if (!_Detector2.default.webgl) {
            _Detector2.default.addGetWebGLMessage();
            var type = void 0;
            if (window.WebGLRenderingContext) {
                type = 'card';
            } else {
                type = 'browser';
            }
            throw new Error('No WebGL support [' + type + '] -- Canceling load');
        } else {
            analytics.track('game_onboarding', 'webgl_supported');
        }
        window.devToolsEnabled = !true;
        window.pokiDebug = !true;
        window.minAspect = 9 / 16;
        window.maxAspect = 16 / 9;
        var skipPreroll = false;
        var loaderBg = '#7bcbed';
        var minDimensions = {
            width: 0,
            height: 0
        };
        var maxDimensions = {
            width: Infinity,
            height: Infinity
        };
        var DOMReadyTime, loadingBar, loadingScreen, hipsterWhale, wrapper, loadingDone, brandingDone, started;
        wrapper = document.createElement('div');
        wrapper.id = 'container';
        wrapper.style.position = 'absolute';
        wrapper.style.left = '50%';
        wrapper.style.top = '50%';
        wrapper.style.background = loaderBg;
        wrapper.style.display = 'none';
        wrapper.style.overflow = 'hidden';
        if (window.mouseDisabled) {
            wrapper.style.cursor = 'none';
        }
        var AudioContext = window.AudioContext || window.webkitAudioContext;
        if (AudioContext) {
            window.audioContext = new AudioContext();
        }
        analytics.setDimension('dimension3', null);
        DOMReadyTime = performance.now();
        window.bodyRect = document.body.getBoundingClientRect();
        document.body.appendChild(wrapper);
        resize();
        window.addEventListener('resize', resize);
        loadScript('scripts/asset-loader.min.js', loadPreroll);
        function showHipsterSplash() {
            analytics.track('game_onboarding', 'game_developer_branding');
            POKI_TRACKER.track(poki.tracking.screen.firstPaint);
            hipsterWhale.show();
            hipsterWhale.play(function () {
                brandingDone = true;
                loadingScreen.show(skipPreroll);
                attemptStart();
            });
        }
        function loadPreroll() {
            AssetLoader.add.image('sprites/poki-icon.png');
            AssetLoader.add.image('sprites/poki-logo.png');
            AssetLoader.add.image('sprites/chicken.png');
            AssetLoader.load(function () {
                wrapper.style.display = 'block';
                analytics.track('game_onboarding', 'poki_branding');
                var preroll = new _PokiPreroll2.default();
                preroll.wrapper = wrapper;
                preroll.logoSrc = AssetLoader.getAssetById('sprites/poki-logo.png').src;
                preroll.createElements();
                loadingBar = new _LoadingBar2.default();
                loadingBar.wrapper = wrapper;
                loadingBar.chickenSrc = AssetLoader.getAssetById('sprites/chicken.png').src;
                loadingBar.show();
                AssetLoader.progressListeners.push(loadingBar.setProgress.bind(loadingBar));
                if (!skipPreroll) {
                    preroll.play(showHipsterSplash);
                }
                AssetLoader.add.image('sprites/hipster-1.png');
                AssetLoader.add.image('sprites/hipster-2.png');
                AssetLoader.add.image('sprites/hipster-3.png');
                AssetLoader.add.image('sprites/whale-1.png');
                AssetLoader.add.image('sprites/whale-2.png');
                AssetLoader.add.image('sprites/whale-3.png');
                AssetLoader.add.image('sprites/hipster-whale.png');
                AssetLoader.add.script('scripts/tween.min.js');
                AssetLoader.add.plainAudio('plain-audio/splashintro.mp4');
                loadingBar.enteredNewLoadingPhase(0.1);
                AssetLoader.load(function () {
                    preroll.allowClose();
                    hipsterWhaleBranding();
                });
            });
            AssetLoader.loader.script('scripts/three.min.js');
            AssetLoader.loader.script('scripts/game.min.js');
        }
        ;
        function hipsterWhaleBranding() {
            hipsterWhale = new _HipsterWhale2.default();
            hipsterWhale.wrapper = wrapper;
            hipsterWhale.logoSrc = AssetLoader.getAssetById('sprites/hipster-whale.png');
            hipsterWhale.hipsters = [
                AssetLoader.getAssetById('sprites/hipster-1.png'),
                AssetLoader.getAssetById('sprites/hipster-2.png'),
                AssetLoader.getAssetById('sprites/hipster-3.png')
            ];
            hipsterWhale.whales = [
                AssetLoader.getAssetById('sprites/whale-1.png'),
                AssetLoader.getAssetById('sprites/whale-2.png'),
                AssetLoader.getAssetById('sprites/whale-3.png')
            ];
            AssetLoader.add.image('sprites/crossy-road-logo.png');
            AssetLoader.add.webFont('EditUndoBrk', 'fonts/EditUndoBrk.css');
            AssetLoader.add.webFont('8bitwonder', 'fonts/8bitwonder.css');
            AssetLoader.add.script('scripts/three.min.js');
            loadingBar.enteredNewLoadingPhase(0.1);
            AssetLoader.load(function () {
                hipsterWhale.allowClose();
                loadGame();
            });
        }
        function loadGame() {
            POKI_TRACKER.track(poki.tracking.screen.gameLoaderStart);
            analytics.track('game_onboarding', 'game_loader_start');
            loadingScreen = new _LoadingScreen2.default();
            loadingScreen.bgColor = loaderBg;
            loadingScreen.wrapper = wrapper;
            loadingScreen.gameLogoSrc = hipsterWhale.logoSrc.src;
            loadingScreen.pokiLogoSrc = AssetLoader.getAssetById('sprites/poki-logo.png').src;
            AssetLoader.progressListeners.push(loadingScreen.updateProgress.bind(loadingScreen));
            AssetLoader.add.script('scripts/game.min.js');
            AssetLoader.add.spriteSheet('sprites/interface.png', 'sprites/interface.json');
            AssetLoader.add.bitmapText('fonts/8-bit-wonder.png', 'fonts/8-bit-wonder.json');
            AssetLoader.add.bitmapText('fonts/8-bit-wonder-yellow.png', 'fonts/8-bit-wonder.json');
            AssetLoader.add.image('sprites/particles.png');
            AssetLoader.add.image('sprites/trex.png');
            AssetLoader.add.threeFont('fonts/editundobrk-top-numbers.json');
            var audioFiles = [
                'rapidsdeath3.mp4',
                'train-alarm.mp4',
                'rapidsdeath9.mp4',
                'river.mp4',
                'eaglehit.mp4',
                'car-horn.mp4',
                'hawk-screech-02.mp4',
                'car1.mp4',
                'hop2.mp4',
                'train-pass-no-horn.mp4',
                'car2.mp4',
                'train-pass-shorter.mp4',
                'car3.mp4',
                'lilysplash.mp4',
                'trainsplat.mp4',
                'carhit.mp4',
                'logjump.mp4',
                'watersplash.mp4',
                'carsquish.mp4',
                'logjump2.mp4',
                'watersplashlow.mp4',
                'carsquish3.mp4',
                'logjump3.mp4',
                'get-coin-79.mp4',
                'logjump4.mp4',
                'pop-1.mp4',
                'pop-3.mp4',
                'pop-5.mp4',
                'pop-7.mp4',
                'pop-9.mp4',
                'pop-2.mp4',
                'pop-4.mp4',
                'pop-6.mp4',
                'pop-8.mp4',
                'robot/robot-hop-4.mp4',
                'robot/robot-hop-short-2.mp4',
                'robot/robot-hop-1.mp4',
                'robot/robot-hop-short.mp4',
                'robot/robot-hop-2.mp4',
                'robot/robotexplode.mp4',
                'robot/robot-hop-3.mp4',
                'cat/cat1.mp4',
                'cat/cat2.mp4',
                'cat/cat3.mp4',
                'cat/cat4.mp4',
                'chicken/buck1.mp4',
                'chicken/buck5.mp4',
                'chicken/buck10.mp4',
                'chicken/buck6.mp4',
                'chicken/buck11.mp4',
                'chicken/buck7.mp4',
                'chicken/buck12.mp4',
                'chicken/buck8.mp4',
                'chicken/buck2.mp4',
                'chicken/buck9.mp4',
                'chicken/buck3.mp4',
                'chicken/chickendeath.mp4',
                'chicken/buck4.mp4',
                'chicken/chickendeath2.mp4',
                'mallard/quack1.mp4',
                'mallard/quack3.mp4',
                'mallard/quack5.mp4',
                'mallard/quack2.mp4',
                'mallard/quack4.mp4',
                'bannerhit3-g.mp4',
                'prize/counting-of-money-short.mp4',
                'prize/insert-coin.mp4',
                'prize/SlotMachineInsert.mp4',
                'prize/Inserting-Coin-Into-Machine-v1.mp4',
                'prize/Inserting-Coin-Into-Machine-v2.mp4',
                'prize/Inserting-Coin-Into-Machine-v3.mp4',
                'prize/Inserting-Coin-Into-Machine-v4.mp4',
                'prize/coininsert3.mp4',
                'prize/Prize-Wheel.mp4',
                'prize/casinomachine.mp4',
                'prize/UnlockPlain.mp4',
                'prize/clickball.mp4',
                'prize/prizewinner.mp4',
                'prize/play-slots-machine.mp4',
                'gift/openbox.mp4',
                'gift/emptying-the-piggy-bank-2.mp4',
                'gift/Earn-Points.mp4',
                'gift/booktap.mp4'
            ];
            audioFiles.forEach(function (element, idx) {
                AssetLoader.add.audio('audio/' + element);
            });
            loadingScreen.init();
            if (skipPreroll) {
                loadingScreen.show(skipPreroll);
            }
            AssetLoader.add.image('sprites/upsell-phone.png');
            AssetLoader.add.image('sprites/upsell-app-store.png');
            AssetLoader.add.image('sprites/upsell-google-play.png');
            loadingBar.enteredFinalLoadingPhase();
            AssetLoader.load(function () {
                POKI_TRACKER.track(poki.tracking.screen.gameLoaderFinished);
                loadingScreen.forceSkip = true;
                loadingDone = true;
                attemptStart();
            });
        }
        ;
        function startGame() {
            var loadingTimeTotal = performance.now() - DOMReadyTime;
            var loadingTimeLoadingScreen = performance.now() - (loadingScreen.startTime || performance.now());
            analytics.track('game_onboarding', 'game_loader_finished');
            analytics.track('technical_performance', 'loading_time_total', (loadingTimeTotal / 1000).toFixed(1), Math.round(loadingTimeTotal));
            analytics.track('technical_performance', 'loading_time_loading_screen', (loadingTimeLoadingScreen / 1000).toFixed(1), Math.round(loadingTimeLoadingScreen));
            window.container = wrapper;
            window.start();
        }
        ;
        function attemptStart() {
            if (started) {
                return;
            }
            if (!loadingDone || !brandingDone && !skipPreroll) {
                return;
            }
            loadingBar.forceFinished();
            started = true;
            checkVisible(startGame);
            loadingScreen.destroy();
        }
        function loadScript(src, callback) {
            var el = document.createElement('script');
            el.src = src;
            el.onload = callback;
            document.head.appendChild(el);
        }
        ;
        function resize() {
            window.bodyRect = document.body.getBoundingClientRect();
            var windowAspect = bodyRect.width / bodyRect.height;
            var wrapperAspect = Clamp(windowAspect, window.minAspect, window.maxAspect);
            var width, height;
            if (windowAspect > wrapperAspect) {
                height = bodyRect.height;
                width = height * wrapperAspect;
            } else {
                width = bodyRect.width;
                height = width / wrapperAspect;
            }
            width = Clamp(width, minDimensions.width, maxDimensions.width);
            height = Clamp(height, minDimensions.height, maxDimensions.height);
            wrapper.style.width = width + 'px';
            wrapper.style.height = height + 'px';
            wrapper.style.marginLeft = -width * 0.5 + 'px';
            wrapper.style.marginTop = -height * 0.5 + 'px';
        }
        ;
        function checkVisible(callback) {
            if (bodyRect.width === 0 || bodyRect.height === 0) {
                window.setTimeout(function () {
                    checkVisible(callback);
                }, 100);
            } else {
                callback();
            }
        }
        ;
        function Clamp(value, min, max) {
            return Math.min(Math.max(value, min), max);
        }
        ;
        window.isMobile = function () {
            var check = false;
            (function (a) {
                if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) {
                    check = true;
                }
            }(navigator.userAgent || navigator.vendor || window.opera));
            return check;
        }();
        window.isFirefox = function () {
            return /firefox/i.test(navigator.userAgent);
        }();
        window.isChrome = function () {
            var isChromium = window.chrome, winNav = window.navigator, vendorName = winNav.vendor, isOpera = winNav.userAgent.indexOf("OPR") > -1, isIEedge = winNav.userAgent.indexOf("Edge") > -1, isIOSChrome = winNav.userAgent.match("CriOS");
            if (isIOSChrome) {
                return true;
            } else if (isChromium !== null && isChromium !== undefined && vendorName === "Google Inc." && isOpera == false && isIEedge == false) {
                return true;
            }
            return false;
        }();
        window.isSilkBrowser = function () {
            var match = /(?:; ([^;)]+) Build\/.*)?\bSilk\/([0-9._-]+)\b(.*\bMobile Safari\b)?/.exec(navigator.userAgent);
            return !!match;
        }();
        if (!window.performance || !window.performance.now) {
            Date.now || (Date.now = function () {
                return new this().getTime();
            });
            (window.performance || (window.performance = {})).now = function () {
                return Date.now() - offset;
            };
            var offset = (window.performance.timing || (window.performance.timing = {})).navigatorStart || (window.performance.timing.navigatorStart = Date.now());
        }
    }
}));